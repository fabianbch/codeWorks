# -*- coding: utf-8 -*-
"""Segmentación_clientes_Green_Meadows.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t0OpZKwiA0S1no1AunZAcJdwPhpKeEgI

El conjunto de datos “Mall Customers” incluye las siguientes características:

    Customer ID: Un identificador único para cada cliente.

    Gender: El género del cliente: Male, Female

    Age: La edad del cliente.

    Annual income (K$): El ingreso anual aproximado del cliente, expresado en miles de dólares.
    
    Spending Score (1-100): El scoring asignado por el centro comercial en función del comportamiento del cliente y la naturaleza del gasto. Este puntaje o scoring esta en el rango de 1 a 100.
"""

import pandas as pd
dataset = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Segmentacion de clientes/Mall_Customers.csv')
print(dataset)

"""Nos centraremos en Annual income (K$)y Spending Score (1-100).Para ello, seleccionamos dichas columnas del dataset y las convertimos en un ndarray de NumPy, luego, asociamos este resultado a X, siendo esta la famosa matriz de características."""

import numpy as np
import matplotlib.pyplot as plt
X = dataset.iloc[:, [3, 4]].values
print(X)

"""Al visualizar estas dos variables en un gráfico de dispersión, obtenemos una primera impresión de la distribución de los clientes."""

plt.figure(figsize=(8, 5))
plt.scatter(X[:, 0], X[:, 1], color='blue', marker='o')
plt.title('Scatter Plot')
plt.xlabel('Annual Income (k$) ')
plt.ylabel('Spending Score (1-100)')
plt.grid(True)
plt.show()

"""¿Existen patrones o agrupaciones naturales?
Para abordar este pregunta, necesitamos identificar si los clientes de Green Meadows se agrupan por características comunes como: ingresos y puntuaciones de gasto. Esto permitirá comprender la naturaleza específica de los diferentes clústers dentro del conjunto de datos.

K-means, es un algoritmo tremendamente útil para los negocios, gracias a su capacidad de interpretar fácilmente los datos y proporcionar información práctica y relevante. Este método ayuda a las empresas a identificar tendencias ocultas en los datos de clientes, a afinar sus estrategias de marketing y ventas, y a tomar decisiones más informadas y precisas.
"""

from sklearn.cluster import KMeans

wcss = []
n_clu = 10

for i in range(1, n_clu+1):

    kmeans = KMeans(n_clusters = i,
                    init = "k-means++",
                    max_iter = 300,
                    n_init = 10,
                    random_state = 42)

    kmeans.fit(X)

    wcss.append(kmeans.inertia_)

    print(wcss)

"""Como se puede ver en el la lista, los valores de WCSS tienden a disminuir progresivamente a medida que aumenta el número de clústeres. Esta disminución es típicamente rápida al principio y se ralentiza a medida que se alcanza el número óptimo de clústeres."""

plt.plot(range(1,11), wcss, marker='o')
plt.title("Gráfico de Elbow")
plt.xlabel("Número de Clústers")
plt.ylabel("WCSS(k)")
plt.grid(True)
plt.show()

"""Teniendo ya el K-óptimo, lo que vamos hacer es organizar nuestro dataset X en 5 grupos o clústeres distintos.

La idea, es volver a ejecutar el método K-means con K=5 para que el algoritmo encuentre las mejores 5 agrupaciones basándonos en las características de los datos.
"""

kmeans = KMeans(n_clusters = 5,
                init="k-means++",
                max_iter = 100,
                n_init = 10,
                random_state = 42)

y_kmeans = kmeans.fit_predict(X)
y_kmeans

"""Si mostramos las 10 primers perdiciones de clústeres tenemos lo siguiente:"""

y_kmeans[0:10]

"""Tras ajustar el modelo K — Means a nuestros datos y asignar cada muestra a un clúster, ahora debemos integrar los resultados en nuestro conjunto de datos original para facilitar un análisis más detallado y poder dar ese valor añadido a negocio."""

y_kmeans_series = pd.Series(y_kmeans, name='Cluster Pred')

X_clustered = pd.concat([dataset, y_kmeans_series], axis=1)
X_clustered

"""Tras integrar las asignaciones de clúster (Cluster Pred) en nuestro conjunto de datos, el siguiente paso consiste en visualizar los resultados para obtener una comprensión intuitiva de cómo se distribuyen los clústeres en función de las características seleccionadas."""

plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1],
              s = 100, c = "red", label = "Grupo 1")
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1],
              s = 100, c = "blue", label = "Grupo 2")
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s = 100,
              c = "green", label = "Grupo 3")
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s = 100,
              c = "cyan", label = "Grupo 4")
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s = 100,
              c = "magenta", label = "Grupo 5")
plt.scatter(X[y_kmeans == 5, 0], X[y_kmeans == 5, 1], s = 100,
              c = "magenta", label = "Grupo 5")

plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],
              s = 100, c = "black", label = "centroide", marker = '^')
n = '5'
plt.title('Clúster de clientes Centro Comercial (k = ' + str(n) +')')
plt.xlabel('Annual Income (k$) ')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()

"""Cada punto en el gráfico corresponde a una muestra en el conjunto de datos X, coloreada de acuerdo con el clúster al que pertenece. Los colores distintos (rojo, azul, verde, cian y magenta) facilitan la diferenciación visual entre los grupos 1, 2, 3, 4 y 5 respectivamente."""